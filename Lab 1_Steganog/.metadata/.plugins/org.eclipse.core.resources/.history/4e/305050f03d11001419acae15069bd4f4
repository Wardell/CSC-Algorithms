import java.util.List;
import java.util.ArrayList;
import java.util.Set;

import edu.neumont.nlp.DecodingDictionary;

public class ExaustiveDecoder {
	 private DecodingDictionary dd = new DecodingDictionary(); 
	// private ExhaustiveDecoder decoder = new ExhaustiveDecoder(dd, 100);
	public List<String> decode (String message)
	{
		List permutations = new ArrayList();
		List soFar = new ArrayList();
		retraceSteps(soFar,message,permutations);
		return permutations;
	}
	
	public String decrypter(String lastWord, String sentance, String currentCode)
	{
		if(currentCode.isEmpty())
		{
			return sentance;
		}
		
		else
		{
			int index = 0;
			int end =  currentCode.length();
			while(index < end)
			{
				String charater = currentCode.substring(0,index+1);
				  Set <String>  possibleWords = dd.getWordsForCode(charater);
				  
				  if(possibleWords != null)
				  {
					  for(String s :  possibleWords)
					  {
						  if(lastWord.length() == 0 || checkSentance(sentance) == 5)
						  {
							  String newWords =  sentance + s + " ";
							  String remaning = currentCode.substring(index + 1);
							  System.out.println(newWords);
							  return decrypter(s, newWords, remaning);
						  }
						  
						  else 
						  {
							  String newWords =  sentance + s + " ";
							 
							  
							  String remaning = currentCode.substring(index + 1);
							  System.out.println(newWords);
							  return  decrypter(lastWord, newWords,remaning);
						  }
					  }
				  }
				  
				  else 
				  {
					//dd.getCodes()
				  }
				  
	
				  }
			}
		return sentance;	
		
	}
	
	public float checkSentance(String sentance)
	{
		String [] splitString = {sentance.substring(0, sentance.length() / 2)};
		float frequency =  1.0f;
		
		for(int i =0; i < splitString.length && i +1 < splitString.length;i++)
		{
			frequency *= dd.frequencyOfFollowingWord(splitString[i], splitString[i+1]) / 1000;
		}
		return frequency;
	}
	
	public void retraceSteps(List soFar, String togo,List permutations)
	{
		if(togo.isEmpty())
		{
			permutations.add(soFar);
			return;
		}
		
		for(int index = 0; index < togo.length(); index++)
		{
			
		}
	}
	


}
