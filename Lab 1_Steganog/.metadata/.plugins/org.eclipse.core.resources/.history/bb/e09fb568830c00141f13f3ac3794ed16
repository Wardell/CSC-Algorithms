import java.nio.IntBuffer;
import java.util.List;
import java.util.ArrayList;

import edu.neumont.nlp.DecodingDictionary;

public class ExaustiveDecoder {
	 private DecodingDictionary dd = new DecodingDictionary();
	// private ExhaustiveDecoder decoder = new ExhaustiveDecoder(dd, 100);
	public List<String> decode (String message)
	{
		return null;
	}
	
	
	public boolean retraceSteps()
	{
		return false;
	}
	
public class BackTracker
{
	public Integer[][]findPermutations(Integer[] array)
	{
		
	}
	
	// toGo "3;4;5;6;7"
	public void findPermuntationshelper(List<Integer> soFar, List<Integer> toGo,  List<Integer> successes)
	{
		//success case
		//if toGo is empty, sucess!
		if(toGo.isEmpty())
		{
			successes.addAll(soFar);
			return;
		}
		//failure case = when is this needed?
		
		//for loop to try each element of toGo
		//"try" here means here means make a recursive call with a larger so far and a smaller toGo
		for(int index = 0; index < toGo.size();index++)
		{
			Integer i = (Integer)toGo.get(index);
			List newSofar = new ArrayList(soFar);
			newSofar.add(i);
			toGo.r
			List newToGo = new ArrayList();
			findPermuntationshelper( newSofar,newToGo,successes);
		}
	}
}

}
